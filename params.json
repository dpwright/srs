{"name":"srs","google":"","tagline":"A highly extensible command-line spaced repetition system","body":"srs\r\n===\r\n\r\nA Spaced Repetition System is a study tool which works by spacing out exercises\r\nso as to learn in the most efficient manner possible.  Further information can\r\nbe found at the following Wikipedia pages:\r\n\r\n * [Spacing Effect][1]\r\n * [Forgetting Curve][2]\r\n * [Spaced Repetition][3]\r\n\r\n`srs` is a command-line based implementation of the spaced repetition system.  It\r\nis designed to be highly extensible and to promote the sharing of data for study\r\nby others.\r\n\r\nInstallation\r\n------------\r\n\r\n`srs` is distributed as a Gem.  Make sure you have Ruby and RubyGems installed,\r\nand then type:\r\n\r\n    $ gem install srs\r\n\r\nUsage\r\n-----\r\n\r\nThis first release of `srs` is an _alpha_ release -- it is functionally\r\ncomplete, but the user interface is in its very early stages, documentation is\r\nlacking, and there may be bugs.  Since elements in the workspace format may\r\nchange, it is not recommended to use this version for actual practice.  Treat it\r\nas a \"sneak preview\".  Version 0.2 is intended to be much closer to a final,\r\nusable system, so please watch the project for updates on when that version is\r\nreleased.\r\n\r\nWith that in mind, read on...\r\n\r\n### Initialising a workspace\r\n\r\nThe first thing you will want to do once you've installed `srs` is to initialise\r\na _workspace_.  This is where all the data required for one set of material you\r\nwant to study reside.  It is generally a good idea to group related items\r\ntogether -- for example, I have a workspace for Japanese vocabulary, another for\r\nkanji, and another for poetry and quotations which I'd like to remember.\r\n\r\nHow you think the things you want to learn should be distributed is a\r\npersonal choice, and you should consider for yourself what will work best for\r\nyou.  For example, some people might prefer to put the Japanese vocabulary and\r\nthe kanji together in one workspace -- that is fine.  Merging or splitting\r\nworkspaces at a later stage is relatively easy, so do experiment!\r\n\r\nTo initialise a workspace, create a directory and run the following command\r\ninside it:\r\n\r\n    $ srs init\r\n\r\n### Adding an exercise\r\n\r\nIn `srs`, a single item of practice or revision is called an _exercise_.  These\r\ncan be anything -- a flashcard-style question-and-answer, or a more interactive\r\nform of practice.  What a particular exercise entails depends entirely on what\r\nit is you want to practice, and for that reason `srs` introduces the concept of\r\n_models_.\r\n\r\nA model is a Ruby class which defines how an exercise is performed.  `srs` comes\r\npackaged with the most basic kind of model, a flashcard, which is distributed\r\nunder the name `SimpleFlashcard`.  You can create your own models, but for now\r\nwe'll make use of the `SimpleFlashcard` model to get something up and running\r\nquickly.\r\n\r\nA `SimpleFlashcard` exercise comes in two parts:\r\n\r\n * The _data_, which usually contains the actual thing you want to test\r\n * The _exercise specification_, which determines how to use that data.\r\n\r\nThis separation allows you to use the same data for multiple exercises.  In this\r\nexample, we're going to create a \"Production\" and a \"Recognition\" card for the\r\nJapanese word, 勉強, which means \"study\".\r\n\r\nThe first thing we need to do is create the DataFile.  `SimpleFlashcard`\r\ncurrently expects its data to consist of a series of key-value pairs, separated\r\nby a colon.  Currently multi-line fields are not supported, though this will\r\nchange in a future version.  Run the following from inside the workspace\r\ndirectory you created (The ^D at the end signifies pressing Control-D to send\r\nthe end-of-file marker to `srs`):\r\n\r\n    $ srs insert-into data\r\n    Word: 勉強\r\n    Pronunciation (Hiragana): べんきょう\r\n    Pronunciation (Romaji): Benkyou\r\n    Meaning: Study\r\n    ^Dc13d1e790ef5e8ced8c96a37a6d014f08ddcb3af\r\n\r\nYou should see the output after pressing ^D as above,\r\n`c13d1e790ef5e8ced8c96a37a6d014f08ddcb3af`.  The string itself may be different,\r\nbut it will be a long string of hexadecimal digits.  The `insert-into` command\r\nreads data in from STDIN and outputs an ID which can be used by other `srs`\r\ncommands to access that data.\r\n\r\nWe now have data containing four fields related to the word.  We can combine\r\nthese fields in a variety of ways to generate a number of exercises.  Here we'll\r\ngenerate two; one to produce the English meaning when shown the word and the\r\npronunciation; the other to produce the Japanese word when shown the English.\r\nInput the following, substituting the value passed into the _Data_ field with\r\nwhatever was output from the previous command:\r\n\r\n    $ srs insert-into exercises\r\n    Data: c13d1e790ef5e8ced8c96a37a6d014f08ddcb3af\r\n    Model: SimpleFlashcard\r\n\r\n    [Word]\r\n    [Pronunciation (Hiragana)]\r\n    ---\r\n    [Meaning]\r\n    ^D884bd92624411f5bb42ff9abdf84c3e09ba00cab\r\n\r\nNote the blank line between the set of key-value pairs and the text below.\r\n`SimpleFlashcard` expects a series of headers, followed by a blank line,\r\nfollowed by some metadata.  The metadata is in two parts: the question, which is\r\neverything before the \"---\" string, and the answer, which is everything that\r\ncomes after it.  Any words within square brackets are substituted with the value\r\nof their corresponding field in the data.\r\n\r\nAs with the previous command, this command outputs an ID once it has completed.\r\nRemember this; you will need it later.  Let's add the second exercise:\r\n\r\n    $ srs insert-into exercises\r\n    Data: c13d1e790ef5e8ced8c96a37a6d014f08ddcb3af\r\n    Model: SimpleFlashcard\r\n\r\n    [Meaning]\r\n    ---\r\n    [Word]\r\n    ^Dd930b3fce3d2f988758c7088ea77d9075b8c82bf\r\n\r\nAs you can see, this is just the same exercise, with the question and answer\r\nreversed.  Also, we are ignoring pronunciation for this one.\r\n\r\nYou will notice, neither of these exercises make use of the \"Pronunciation (Romaji)\"\r\nfield.  The truth is, I don't much like Romaji.  But it is entirely reasonable\r\nto add fields you won't use as part of the exercises to the data; you may choose\r\nto create exercises which make use of that data later, or you may just want to\r\nlook it up (for example, you could include the link to a URL where you\r\ndiscovered the information).\r\n\r\n### Scheduling an exercise\r\n\r\nThe next thing we must do is schedule the exercises we've just created.  If we\r\ndon't do this, they will never enter the `srs` scheduling system, and so they\r\nwill simply sit there unasked!\r\n\r\nThere have been a number of spaced repetition algorithms developed over the\r\nyears, perhaps the most famous of which are the [Pimsleur Graduated Recall][4]\r\nand [SuperMemo 2][5] algorithms.  As with models, `srs` allows you to define\r\nyour own custom spacing algorithm by creating a _scheduler_.  The base\r\ndistribution comes with probably the most popular spacing algorithm\r\npre-installed, SuperMemo 2.  We'll use that one.\r\n\r\nType the following, substituting the two ids with the ones returned when you\r\ninserted the two exercises:\r\n\r\n    $ srs schedule -s SuperMemo2 884bd92624411f5bb42ff9abdf84c3e09ba00cab\r\n    schedule/pending/20120708003132.386\r\n    $ srs schedule -s SuperMemo2 d930b3fce3d2f988758c7088ea77d9075b8c82bf\r\n    schedule/pending/20120708003149.754\r\n\r\n### Doing some reps -- new exercises\r\n\r\nNow that you've scheduled some exercises, you're ready to do some reps.  Let's\r\nask `srs` what the next new exercise is which is available for learning:\r\n\r\n    $ srs next-new\r\n    20120708003132.386\r\n\r\nThe ID of the first exercise you scheduled above should be output.  In order to\r\nactually test ourselves, we'll need the ID of the exercise we want to run.  We\r\ncan get this from the `Exercise` field stored in the schedule (as always,\r\nremembering to substitute the example ID below with your own):\r\n\r\n    $ srs get-field exercise 20120708003132.386\r\n    884bd92624411f5bb42ff9abdf84c3e09ba00cab\r\n\r\nAn exercise ID will be output, which we can feed straight into `do-exercise`:\r\n\r\n    $ srs do-exercise a884bd92624411f5bb42ff9abdf84c3e09ba00cab\r\n    勉強\r\n    べんきょう\r\n    >\r\n\r\nAt this point you are given a prompt.  Let's enter the correct answer, \"Study\",\r\nand see what happens:\r\n\r\n    > Study\r\n    Correct.\r\n    You scored: 1.0\r\n\r\nScores in `srs` are normalised from 0-1, so 1.0 is a full score.  Well done!  We\r\nstill need to enter this into the scheduler so that it knows when next to repeat\r\nthe exercise.  Enter the following to reschedule the exercise.  The ID is the\r\n_schedule_ ID, not the one for the exercise:\r\n\r\n    $ srs reschedule 20120708003132.386 1.0\r\n    Exercise rescheduled for 2012-07-09 00:00:00 +0900\r\n\r\nExcellent!  We'll see this exercise again tomorrow.\r\n\r\nIt's actually possible to wrap up most of the above in a single line.  The\r\nfollowing assumes you use a `bash` shell, though other shells may be similar:\r\n\r\n    $ SCHEDULE=$(srs next-new); EXERCISE=$(srs get-field exercise $SCHEDULE); srs do-exercise $EXERCISE\r\n\r\nThis time we'll try answering the question incorrectly:\r\n\r\n    Study\r\n    > 遊ぶ\r\n    勉強\r\n    Was your answer: [h] Correct, [j] Close, [k] Wrong, or [l] Very Wrong?\r\n    > l\r\n    You scored: 0.0\r\n\r\nWhen you enter a wrong answer, the `SimpleFlashcard` doesn't attempt to judge\r\nfor itself whether or not you were close to the right answer.  Instead, it shows\r\nyou the correct answer and lets you specify how close you thought you were.  In\r\nthis case, we were miles off, so we selected 'l', to fail the exercise\r\ncompletely.  Now to reschedule the exercise:\r\n\r\n    $ srs reschedule $SCHEDULE 0.0\r\n    Exercise rescheduled for 2012-07-09 00:00:00 +0900\r\n    Exercise failed; marked for repetition\r\n\r\nSince we failed the exercise, the scheduler has marked it for repetition.  This\r\nmeans that once we've finished all our scheduled reps for the day, we will be\r\npresented with this exercise (and any other failed exercises), to try again until\r\nwe have managed to pass them.  Note that only the first attempt affects the\r\ninterval; subsequent repetitions are simply practice.\r\n\r\n### Practice makes perfect!  Repeating exercises\r\n\r\nFor the most part, you're going to be practicing exercises you've already done\r\nonce.  The flow for this is very similar to the above, except that instead of\r\n`next-new` we use the `next-due` command.\r\n\r\nBefore we can use this command, however, we need to update the srs queue:\r\n\r\n    $ srs queue\r\n\r\nThis command tells `srs` to look through the schedules and determine which\r\nexercises are due for practice.  We can now use `next-due` similarly to the\r\nway we practised new exercises in the previous section:\r\n\r\n    $ SCHEDULE=$(srs next-due); EXERCISE=$(srs get-field exercise $SCHEDULE); srs do-exercise $EXERCISE\r\n    Study\r\n    > 勉強\r\n    Correct.\r\n    You scored: 1.0\r\n\r\n    $ srs reschedule $SCHEDULE 1.0\r\n    Exercise rescheduled for 2012-07-09 00:00:00 +0900\r\n\r\nIn this case, since the exercise had already been scheduled and was simply a\r\nrepetition of a failed exercise, the date matched that which was output\r\npreviously.\r\n\r\nFinally, we can confirm that there are no more exercises left to practice:\r\n\r\n    $ srs queue\r\n    $ srs next-due\r\n\r\nContributing\r\n------------\r\n\r\n`srs` is in very early stages and as such there is a _lot_ of work still to do\r\non it.  Contributions are welcome!\r\n\r\nTo contribute, fork the project on github and send me a pull request, or email\r\nme a patch.  Please bear the following in mind when making contributions:\r\n\r\n * Try and keep individual commits small and self-contained.  If I feel like\r\n   there is too much going on in a single commit, I may ask you to split it up\r\n   into multiple commits.\r\n * Please write clear, descriptive commit messages.  These should be formatted\r\n   with a title of `<=` 50 characters, and body text wrapped at 72 characters.\r\n   I am quite particular about this.\r\n * I come from a pretty heavy C++ background.  Ruby style corrections and\r\n   improvements are very much appreciated!  Please be nice about it.\r\n\r\nCopyright\r\n---------\r\n\r\nCopyright (c) 2012 Daniel P. Wright.\r\n\r\nThis software is released under the Simplified BSD Licence.  See LICENCE.md for\r\nfurther details.\r\n\r\n[1]: http://en.wikipedia.org/wiki/Spacing_effect\r\n[2]: http://en.wikipedia.org/wiki/Forgetting_curve\r\n[3]: http://en.wikipedia.org/wiki/Spaced_repetition\r\n[4]: http://en.wikipedia.org/wiki/Graduated_interval_recall\r\n[5]: http://www.supermemo.com/english/ol/sm2.htm\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}